using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.IO;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleExercises.Oop {
	module Week2 {

		public TestExercise1(): void {
			validate(list_equal([1,2,3], [1,2,3]), "Raw \"list_equal\" test");

			def list_1 = [1, 2, 3, 4, 5, 6];
			def list_2 = [9, 3, 0, 4, 8, 1, 1, 7];
			def list_3 = [-1, 0, 1];

			validate_equal(head(list_1), 1, "head #1");
			validate_equal(head(list_2), 9, "head #2");

			validate_list_equal(tail(list_1), [2, 3, 4, 5, 6], "tail #1");
			validate_list_equal(tail(tail(list_1)), [3, 4, 5, 6], "tail #2");

			validate_equal(length(list_1), list_1.Length, "length #1");
			validate_equal(length(list_2), list_2.Length, "length #2");

			validate_equal(max(list_2), 9, "max #1");
			validate_equal(max(list_3), 1, "max #2");

			validate_equal(last(list_1), 6, "last #1");
			validate_equal(last(list_2), 7, "last #2");
			validate_equal(last(list_3), 1, "last #3");

			validate_list_equal(last_n(list_1, 2), [5, 6], "last_n #1");
			validate_list_equal(last_n(list_1, 6), [1, 2, 3, 4, 5, 6], "last_n #2");
			validate_list_equal(last_n(list_1, 0), [], "last_n #3");
			validate_exception(fun () {
				_ = list_equal(last_n(list_3, 4), []);
			}, "last_n #4");

			validate_equal(nth(list_1, 0), 1, "nth #1");
			validate_equal(nth(list_1, 5), 6, "nth #2");
			validate_exception(fun () {
				_ = nth(list_3, 4);
			}, "nth #3");

			validate_list_equal(append(list_1, list_3), [1, 2, 3, 4, 5, 6, -1, 0, 1], "list_equal #1");
			validate_list_equal(append(list_1, []), [1, 2, 3, 4, 5, 6], "list_equal #2");

			validate_list_equal(range(list_1, 1, 5), [1, 2, 3, 4, 5], "range #1");
			validate_list_equal(range(list_1, -1, 5), [1, 2, 3, 4, 5], "range #2");
			validate_list_equal(range(list_1, 6, 5), [], "range #3");
		}

		public TestExercise2(): void {
			iter([1, 4, 5, 9, 10], fun (x) {
				printf("%d\n", x);
			});

			print("\n");

			validate_list_equal(map([1, 2, 3, 4, 5, 6], Convert.ToString), ["1", "2", "3", "4", "5", "6"], "map");

			validate_equal(forall([1, 3, 5, 7, 9], fun (x) {
				x % 2 != 0;
			}), true, "forall #1");
			validate_equal(forall([1, 2, 3, 5, 7, 9], fun (x) {
				x % 2 != 0;
			}), false, "forall #2");

			validate_equal(find([1, 3, 4], fun (x) {
				x > 2;
			}), 3, "find #1");
			validate_equal(find([1, 3, 4], fun (x) {
				x > 20000;
			}), 0, "find #2");
			validate_equal(find(["Hello", "World"], fun (x) {
				x.ToLowerInvariant() == "there";
			}), null, "find #3");
		}

		public TestExercise3(): void {
			validate_list_equal(flattern([[1, 2], [3, 4], [5]]), [1, 2, 3, 4, 5], "flattern");
		}

		validate_exception(fn: void -> void, description: string): void {
			mutable test;

			try {
				fn();
				test = false;
			} catch {
				| _ => test = true;
			}

			validate(test, description);
		}

		validate_list_equal[T](l1: list[T], l2: list[T], description: string): void {
			validate(list_equal(l1, l2), description);
		}

		validate_equal[T](v1: T, v2: T, description: string): void {
			validate(System.Collections.Generic.EqualityComparer[T].Equals(v1, v2), description);
		}

		validate(test: bool, description: string): void {
			if (test) {
				printf("OK: %s\n", description);
			} else {
				printf("Fail: %s\n", description);
			}
		}

		list_equal[T](l1: list[T], l2: list[T]): bool {
			if (l1.Length != l2.Length) {
				false;
			} else {
				match (l1, l2) {
					| (Nil, Nil) => true;
					| (Nil, _) => false; // Won't happen
					| (_, Nil) => false; // Won't happen
					| (head1 :: tail1, head2 :: tail2) => {
							if (System.Collections.Generic.EqualityComparer[T].Equals(head1, head2)) {
								list_equal(tail1, tail2);
							} else {
								false;
							}
					}
				}
			}
		}

		head[T](l: list[T]): T {
			| [] => throw System.ArgumentException();
			| head :: _ => head;
			| _ => throw System.ApplicationException("Should not happen");
		}

		tail[T](l: list[T]): list[T] {
			| [] => [];
			| _ :: tail => tail;
			| _ => throw System.ApplicationException("Should not happen");
		}

		length[T](l: list[T]): int {
			| [] => 0
			| _ :: tail => 1 + length(tail);
			| _ => throw System.ApplicationException("Should not happen");
		}

		max(l: list[int]): int {
			| [] => throw System.ArgumentException();
			| [n] => n;
			| n :: tail => {
					def tailMax = max(tail);
					if (n > tailMax) n else tailMax;
			}
			| _ => throw System.ApplicationException("Should not happen");
		}

		last[T](l: list[T]): T {
			| [] => throw System.ArgumentException();
			| [item] => item;
			| _ :: tail => last(tail);
			| _ => throw System.ApplicationException("Should not happen");
		}

		last_n[T](l: list[T], n: int): list[T] {
			if (n < 0) {
				throw System.ArgumentException();
			} else if (n == 0) {
				[];
			} else {
				if (l.Length < n) {
					throw System.ArgumentException();
				} else if (l.Length == n) {
					l;
				} else {
					match (l) {
						| _ :: tail => last_n(tail, n);
						| _ => throw System.ApplicationException("Should not happen");
					}
				}
			}
		}

		nth[T](l: list[T], n: int): T {
			if (n < 0 || l.Length <= n) {
				throw System.ArgumentException();
			} else {
				match (l) {
					| head :: tail => {
							if (n == 0) {
								head;
							} else {
								nth(tail, n - 1);
							}
					}
					| [] => throw System.ArgumentException();
					| _ => throw System.ApplicationException("Should not happen");
				}
			}
		}

		append[T](l1: list[T], l2: list[T]): list[T] {
			match (l1) {
				| [] => l2;
				| [item] => item :: l2;
				| head :: tail => {
						head :: append(tail, l2);
				}
				| _ => throw System.ApplicationException("Should not happen");
			}
		}

		range(l: list[int], from: int, to: int): list[int] {
			if (from > to) {
				[]
			} else {
				match (l) {
					| [] => [];
					| [item] => {
							if (from <= item && item <= to) {
								l;
							} else {
								[];
							}
					}
					| head :: tail => {
							if (from <= head && head <= to) {
								head :: range(tail, from, to);
							} else {
								range(tail, from, to);
							}
					}
					| _ => throw System.ApplicationException("Should not happen");
				}
			}
		}

		iter[T](l: list[T], f: T -> void): void {
			match (l) {
				| head :: tail => {
						f(head);
						iter(tail, f);
				}
				| Nil => ();
			}
		}

		map[TFrom, TTo](l: list[TFrom], f: TFrom -> TTo): list[TTo] {
			match (l) {
				| head :: tail => {
						f(head) :: map(tail, f);
				}
				| Nil => [];
			}
		}

		forall[T](l: list[T], p: T -> bool): bool {
			match (l) {
				| head :: tail => {
						if (p(head)) {
							forall(tail, p);
						} else {
							false;
						}
				}
				| Nil => true;
			}
		}

		find[T](l: list[T], p: T -> bool): T {
			match (l) {
				| head :: tail => {
						if (p(head)) {
							head;
						} else {
							find(tail, p);
						}
				}
				| Nil => default(T);
			}
		}

		// This implementation is ugly:
		//   1. it uses mutable object;
		//   2. it is not a tail recursion;
		//   3. the two-level structure is hard-coded.
		flattern[T](l: list[list[T]]): list[T] {
			mutable r = [];

			def expand(l) {
				match (l) {
					| head :: tail => {
							def innerExpand(l) {
								match (l) {
									| head :: tail => {
											innerExpand(tail);
											r = head :: r;
								}
									| Nil => ();
								}
							}

							expand(tail);
							innerExpand(head);
					}
					| Nil => ();
				}
			}

			expand(l);

			r;
		}

	}
}
